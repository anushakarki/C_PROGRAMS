C Programming 
28/11/2023 
1.Bubble sort 
#include<stdio.h>
int main()
{
    int i,j,num,temp;//Run two loops nested in one another.
    scanf("%d",&num);
    int a[num];
    printf("enter the number\n");
    for(i=0;i<num;i++) //The outer loop will run from i = 0 to i < n – 1, where n is the number of elements in the list.
    {
        scanf("%d",&a[i]);
    }
    for(i=0;i<num;i++)
    {
        for(j=0;j<num-1-i;j++)//The inner loop will run from j = 0 to j < n – i – 1. It is because, after each iteration of the outer loop,
       //  one element at the end (or at the start if the order is decreasing order) will be in its right place so we can leave it as it is.
            {
                if(a[j]>a[j+1])//n the inner loop, we will check if the arr[ j ] > arr[ j + 1 ].If it’s true, then we will swap places of these elements.If false, we will continue to the next iteration.
                {
                    temp=a[j];
                    a[j]=a[j+1];
                    a[j+1]=temp;
                }
            }
    }
     for(i=0;i<num;i++)
     {
    printf("%d\n",a[i]);
     }
}
------------------------------------------------------------------------------------------------------------------------
29/11/2023 
2. Reverse of an array
#include<stdio.h>
#define MAX 50
void main()
{
    int arr[MAX],n,i,temp;
    printf("enter size of array:");
    scanf("%d",&n);
    printf("enter the number\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    for(i=0;i<n/2;i++)
    {
        temp=arr[i];
        arr[i]=arr[n-i-1];
        arr[n-i-1]=temp;
    }
    printf("\n array after reversing:\n");
    for(i=0;i<n;i++)
    {
        printf("%d",arr[i]);
    }
}
------------------------------------------------------------------------------------------------------------------------

1/12/2023
3.Structure_of _student_data
#include<stdio.h>
struct student
{
    int rollno;
    char subtopicdefination[20];
};
int main()
{
    struct student s[10];
    int i,n;
    printf("how many studentd");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("student%d:rollno and name",i);
        scanf("%d%s",&s[i].rollno,s[i].subtopicdefination);
    }
    printf("you have entered\n");
    for(i=0;i<n;i++)
    {
        printf("student=%d:Rollno=%d name=%s\n",i,s[i].rollno,s[i].subtopicdefination);
    }
}
------------------------------------------------------------------------------------------------------------------------
3/12/2023
4.factorial_using_function
#include<stdio.h>
int fact(int);
void main()
{
    int ans,n;
    printf("enter the value of N\n");
    scanf("%d",&n);
    ans=fact(n);
    printf("factorial of a number is :%d",ans);
}
int fact(int n)
{
    int fact1=1;
    if(n==1)
    {
        return fact1;
    }
    else
    {
        fact1=n*fact(n-1);
        return(fact1);
    }
}
------------------------------------------------------------------------------------------------------------------------
6/12/2023 
5. NESTED_SWITCH_CASE
#include<stdio.h>
#include<stdlib.h>
void main()
{
    int choice,ch1,ch2;
    printf("\n1.pen \n2 fruit");
    printf("\n enter value of choice:");
    scanf("%d",&choice);
    switch(choice)
    {
    case 1:
        printf("\n1 micro \n2 renold \n3 cello:");
        printf("\n enter the value of ch1\n:");
        scanf("%d",&ch1);
        switch(ch1)
        {
        case 1:
            {
                printf("\nmicro");
                break;
            }
        case 2:
            {
                printf("\n renold");
                break;
            }
        case 3:
            {
                printf("\n cello");
                break;
            }
        default:
            {
                printf("invalid case");
            }
        }

    {
    case 2:
            {
                printf("\n1 mango \n2 orange \n3 pineple\n");
                printf("enter the value of ch2;\n");
                scanf("%d",&ch2);
                switch(ch2)
                {
                case 1:
                    {
                        printf("\n mango");
                        break;
                    }
                case 2:
                    {
                        printf("\n orange");
                        break;
                    }
                case 3:
                    {
                        printf("\n pineple");
                        break;
                    }
                default:
                    {
                        printf("invalid");
                    }

                    
                }
            }
    }
    }

}
------------------------------------------------------------------------------------------------------------------------
10/12/2023 
6. call_by_value_function
#include<stdio.h>
#include<stdlib.h>
 void cube(int);
 int main ()
 {
     int a=2;
     cube(a);
     printf("\n a=%d",a);
     return 0;
 }
 void cube (int x)
 {
     x=x*x*x;
     printf("\n x=%d",x);
 }
------------------------------------------------------------------------------------------------------------------------
5/03/2024 
7. Displaying the memory address of structure and union members
#include<stdio.h>
struct data1
{
    int i;
    float f;
    char c;
    double d;
};
union data2
{
    int i;
    float f;
    char c;
    double d;

};
void main()
{
    struct data1 d1;
    union data2 d2;

    printf("\n address of struct d1.i=%u",&d1.i);
    printf("\n address of struct d1.f=%u",&d1.f);
    printf("\n address of struct d1.c=%u",&d1.c);
    printf("\n address of struct d1.d=%u",&d1.d);

    printf("\n address of union d2.i=%u",&d2.i);
    printf("\n address of union d2.f=%u",&d2.f);
    printf("\n address of union d2.c=%u",&d2.c);
    printf("\n address of union d2.d=%u",&d2.d );
}
output:
 address of struct d1.i=6422016
 address of struct d1.f=6422020
 address of struct d1.c=6422024
 address of struct d1.d=6422032
 address of union d2.i=6422008
 address of union d2.f=6422008
 address of union d2.c=6422008
 address of union d2.d=6422008

------------------------------------------------------------------------------------------------------------------------
8. demostration of size of operator
#include<stdio.h>
struct data1
{
    int i;
    float f;
    char c;
    double d;

};

union data2
{
    int i;
    float f;
    double d;
    char c;

};
void main()
{
    struct data1 d1;
    union  data2 d2;

    printf("\n size of the struct d1=%d",sizeof(d1));
    printf("\n size of the unoin d2=%d",sizeof(union data2));


    printf("\n size of short signed int =%d",sizeof(short signed int));
    printf("\n size of short unsigned  int =%d",sizeof(short unsigned int));
    printf("\n size of long signed int =%d",sizeof(long signed int));
    printf("\n size of long unsigned =%d",sizeof(long unsigned int));

    printf("\n size of int =%d",sizeof(int));
    printf("\n size of float =%d",sizeof(float));
    printf("\n size of double =%d",sizeof(double));
    printf("\n size of char =%d",sizeof(char));
}
output:
 size of the struct d1=24
 size of the unoin d2=8
 size of short signed int =2
 size of short unsigned  int =2
 size of long signed int =4
 size of long unsigned =4
 size of int =4
 size of float =4
 size of double =8
 size of char =1
------------------------------------------------------------------------------------------------------------------------
10.demostration of intitizing and accessing union member 
#include<stdio.h>
union DATA
{
    int i;
    float f;
    char c;
    double db;

};
void main()
{

    union DATA d;
    printf("\n size of the d =%d",sizeof(d));

    d.i=10;
    printf("\ni=%d",d.i);

    d.f=12.4879;
    printf("\n\ni=%d",d.i);
    printf("\nf=%f",d.f);

    d.c='A';
    printf("\n\ni=%d",d.i);
    printf("\nf=%f",d.f);
    printf("\nc=%c",d.c);
    printf("\ndb=%lf",d.db);
}
output:
 size of the d =8
i=10

i=1095224944
f=12.487900

i=1095224897
f=12.487855
c=A
db=0.000000
------------------------------------------------------------------------------------------------------------------------
11. demonstration of defining the structure with a key word tag
#include<stdio.h>
struct tag
{

    int usn ;
    char sname[20];
    float avg;

}s1={1501,"sanjay",67.98};
void main()

{
    struct tag s2={1502,"manish",67.44};
    struct tag s3;
    s3=s2;

    printf("\nusn:%d",s1.usn);
    printf("\nname:%s",s1.sname);
    printf("\navg:%f",s1.avg);

    printf("\nusn:%d",s2.usn);
    printf("\nname:%s",s2.sname);
    printf("\navg:%f",s2.avg);

    printf("\nusn:%d",s3.usn);
    printf("\nname:%s",s3.sname);
    printf("\navg:%f",s3.avg);
}
output:

usn:1501
name:sanjay
avg:67.980003
usn:1502
name:manish
avg:67.440002
usn:1502
name:manish
avg:67.440002
------------------------------------------------------------------------------------------------------------------------
12.demostration of defining the structure without defing the struct name /tag name
#include<stdio.h>
struct
{
    int usn;
    char name[20];
    float avg;

}s={1501,"sanjay",89.89};

void main()
{
   printf("\n s:");
   printf("\n usn:%d",s.usn);
   printf("\n name:%s",s.name);
   printf("\n avd:%f",s.avg);
}
output:
 s:
 usn:1501
 name:sanjay
 avd:89.889999
------------------------------------------------------------------------------------------------------------------------
2/04/24
13.Factorial of a number using function 
#include<stdio.h>
#include<conio.h>

void main()
{
    unsigned int num,f=1,i;

    printf("\n enter the number\n");
    scanf("%d",&num);

    for(i=1;i<=num;i++)
    {
        f=f*i;
    }
    printf("%u",f);
}
------------------------------------------------------------------------------------------------------------------------
14.Factorial of a given number using no return and no arguments
#include<stdio.h>
#include<conio.h>

/* function declaration*/
void fact();

void main()
{
    fact();/*call*/
}
void fact()
/*defination*/
{
    unsigned int num,f=1,i;

    printf("\n enter a number:");
    scanf("%u",&num);

    for (i=1;i<=num;i++)
    {
        f=f*i;
    }
    printf("\n factorail of given number is %u",f);
}
------------------------------------------------------------------------------------------------------------------------
15.Factorial with return value but no arguments
#include<stdio.h>
#include<conio.h>

/*function declaration*/

int fact();

void main()
{
    int f;
/*function call*/
f=fact();
printf("\n factorial of a given number is :%u",f);
}
/* function defination*/
int fact ()
{
    unsigned int num,f=1,i;
    printf("\nenter the number:");
    scanf("%u",&num);
    for(i=1;i<=num;i++)
    {
        f=f*i;
    }
    return (f);
}
------------------------------------------------------------------------------------------------------------------------
16.Factorial of a number with return values but with arguments 
#include<stdio.h>
#include<conio.h>
/*function declaration*/
void fact();
void main()
{
    unsigned int f,num;
    printf("\n enter the number:");
    scanf("%d",&num);
    /*call*/
    void fact(num);
    /*defination*/
    void fact(unsigned int num);
    {
        unsigned int f=1,i;
        for(i=1;i<=num;i++)
        {
            f=f*i;
        }
        printf("\n factorial of a given number is %u",f);
    }
}
------------------------------------------------------------------------------------------------------------------------
17.Factorial of a given number with return and with arguments 
#include<stdio.h>
#include<conio.h>

/*declaration*/

unsigned int fact (unsigned int num);
int main()
{

    unsigned int num,f;

    printf("\n enter the number:");
    scanf("%u",&num);
    f=fact(num);
    printf("\n factorial of given number is %u",f);
}
unsigned int fact(unsigned int num)
{
    unsigned int f=1,i;
    for (i=1;i<=num;i++)
    {
        f=f*i;
    }
    return(f);
}
------------------------------------------------------------------------------------------------------------------------
18.Demonstrating of defining function before the main function and value which is returned by the function will be redirected to output
#include<stdio.h>
#include<conio.h>
/*defination*/
int fact(int num)
{
    int f=1,i;
    for(i=1;i<=num;i++)
    {
        f=f*i;
    }
    return(f);
}
void main()
{
    int num;
    printf("\nenter the number");
    scanf("%d",&num);
    printf("\n factorial of given number:%d",fact(num));
}
------------------------------------------------------------------------------------------------------------------------
23/04/2024
19.demonstartion of recursive function
#include<stdio.h>
#include<conio.h>
 int fact(int num)
 {
     if(num==0)
        return(1);
     else
        return(num*fact(num-1));
 }
 void main(){
 int num;


 printf("enter the number\n");
 scanf("%d",&num);
 printf("\n factorial of given number is %d",fact(num));


 }
------------------------------------------------------------------------------------------------------------------------
24/4/2023
20.passing arrays to function
#include<stdio.h>

void read_array(int a[100],int n);
void print_array(int a[100],int n);
int i;

void main()
{
    int a[100],n;
    printf("\n enter the size of array\n");
    scanf("%d",&n);

    printf("\n enter %d array elements \n",n);
    read_array(a,n);

    printf("\n given %d array elements are:",n);
    print_array(a,n);

}
void read_array(int a[100],int n)

{
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);
}
    void print_array(int a[100],int n)

    {
        for(i=0;i<n;i++)
        {
            printf("%d\n",a[i]);
        }
    }
------------------------------------------------------------------------------------------------------------------------
25/04/2024
21.check whether the given number is palindrom or not ,write a separate function which will return reverse of a integer number
#include<stdio.h>

int reverse(int num)
{
    int digit,rev=0;
    while(num>0)
    {
        digit=num%10;
        rev=rev*10+digit;
        num=num/10;
    }
    return(rev);
}
void main()
{
    int num;
    printf("/n enter the number:");
    scanf("%d",&num);
    if(num==reverse(num))
        printf("\n given number is palindrom");
    else
        printf("/n given number is not palindrom");

}
------------------------------------------------------------------------------------------------------------------
22.accepting and displaying the char using character ip op fun getch and putch
#include<stdio.h>
void main()
{
    char ch;

    printf("\n enter the character");
    ch=getch();
    printf("\n given character:");  //here it will display
    putch(ch);
    getch();
}
------------------------------------------------------------------------------------------------------------------------
23.demostrating of getch() function to accept and display a single char
#include<stdio.h>
void main()
{
    char ch;

    printf("\n enter the character"); display here
    ch=getch();
    printf("\n given character:"); display here
    putch(ch);
    getch();
}
------------------------------------------------------------------------------------------------------------------------
24.demostration of getche()function to accept and display a single char

#include<stdio.h>
void main()
{
    char ch;
    printf("\n enter the character:");
    ch=getche();
    printf("\n given character:");
    putch(ch);

}
------------------------------------------------------------------------------------------------------------------------
25. demostration of getchar() function to accept and display a single char
#include<stdio.h>
void main()
{
    char ch;
    printf("\n enter the character:");
    ch=getchar();
    printf("\n given character:");
    putch(ch);
    getch();
}
------------------------------------------------------------------------------------------------------------------------
26. check whether given char is an alphabet or not using library function
#include<stdio.h>
#include<ctype.h>

void main()
{
    char ch;

    printf("\n enter a character:");
    ch=getche();

    if(isalpha(ch))
        printf("\n given character is an alphabet");
    else
        printf("\n given character not an alphabet");
    getch();
}
------------------------------------------------------------------------------------------------------------------------
27.  check whether given char is an alphabet or without library function
#include<stdio.h>
void main()
{
    char ch;
    printf("\n enter the character:");
    ch=getche();

    if((ch>=65 && ch<=90) || (ch>=97 && ch<=122))
        printf("\n given character an alphabet");
    else
        printf("\n given charater is not alphabet");
    getch();

}
------------------------------------------------------------------------------------------------------------------------
28./* check whether given char is an alphabet or digit or a special char if it an alphabet check its upper or lower case alphabet without using library function*/
#include<stdio.h>
void main()
{
    char ch;

    printf("\n enter a character:");
    ch=getche();
    if((ch>=65 && ch<=90) || (ch>=97 && ch<=122))
    {
        if(ch>=65 && ch<=90)
            printf("\n upper case alphabet");
        else
        printf("\n lower case alphabet");

    }
    else if(ch>=48 && ch<=57)
    {
        printf("\n character is a digit");
    }
    else
    {
        printf("\n is a special character");

    }
    getch();
}


------------------------------------------------------------------------------------------------------------------------
29./* check whether given char is an alphabet or not if it id not upper case alphabet display its lower case equivalent and if it is not lower case alphabet display its upper case equivalent using lib_function*/
#include<stdio.h>
#include<ctype.h>
void main()
{
    char ch;

    printf("\n enter a character:");
    ch=getche();
    if(isalpha(ch))
    {
        if(isupper(ch))
        {
            printf("\n upper case alphabet is %c",ch);
            ch=tolower(ch);
            printf("\n lower case alphabet is %c ",ch);
        }
        else if(islower(ch))
        {
            printf("\n lower case alphabet is %c",ch);
            ch=toupper(ch);
            printf("\n upper case alphabet is %c",ch);
        }
    }
    else{
        printf("\n given character is not an alphabet:");
    }
    getch();
}


------------------------------------------------------------------------------------------------------------------------
30./* check whether given char is an alphabet or not if it id not upper case alphabet display its lower case equivalent and if it is not lower case alphabet display its upper case equivalent without using lib_function*/
#include<stdio.h>
void main()
{
    char ch;

    printf("\n enter the character:");
    ch=getche();
    if((ch>=65 && ch<=90) || (ch>=97 && ch<=122))
    {
        if(ch>=65 && ch <=90)
        {
            printf("\n upper case alphabet is %c",ch);
            ch=ch+32;
            printf("\n lower case alphabet is %c",ch);
        }
        else if(ch>=97 && ch<=122)
        {
            printf("\n lower case alphabet is %c",ch);
            ch=ch-32;
            printf("\n upper case alphabet is :%c",ch);
        }
    }
    else if(ch>=48 && ch<=57)
    {
        printf("\n given character is a digit");
    }
    else
    {
        printf("\n given character is a special character");
    }
    getch();
}

------------------------------------------------------------------------------------------------------------------------
31./* check whether given char is an alphabet or digit or a special char if it an alphabet check its upper or lower case alphabet using library function*/

#include<stdio.h>
#include<ctype.h>
void main()
{
    char ch;
    printF("\enter the character:");
    ch=getche();
    if(isalpha(ch))
    {
        if(isupper(ch))
            printf("\n upper case alphabet");
        else
            printf("\n lower case alphabet");
    }
    else if(isdigit(ch))
    {
        printf("\n given character is a digit");
    }
    else
    {
        printf("\n special character");
    }
    getch();
}
------------------------------------------------------------------------------------------------------------------------
32.check whether given char is an digit or not using library function

#include<stdio.h>
#include<ctype.h>

void main()
{

    char ch;

    printf("\n enter the given character:");
    ch=getche();

    if(isdigit(ch))
        printf("\n given character is digit");
    else
        printf("\n given character is not digit");
    getch();
}

------------------------------------------------------------------------------------------------------------------------
33./*check whether given char is an digit or not without library function*/
#include<stdio.h>

void main()
{
    char ch;
    printf("\n enter a character:");
    ch=getche();

    if(ch>=43 && ch<=57)
        printf("\n given character is a digit");
    else
        printf("\n given char is a not a digit \n");
    getch();
}
------------------------------------------------------------------------------------------------------------------------
34. 3/05/20204
// program to calculate the areas of circles using a while loop the results are
 //stored in an array of structures the number of circles is unspecified a string is entered to identify easch data set/

 #include<stdio.h>
 #define PI 3.124
 float process(float radius); // function prototype

 int main()
 {
    int n,i=0;  //function declaration

    struct
    {
        char text[20];
        float radius;
        float area; /* structure varaiable declaration */
    }circle[10];
    printf("to stop, enter END for the identifier\n");
    printf("\n identifier:");
    scanf("%s",circle[i].text);
    while(circle[i].text[0]!='E'|| circle[i].text[1]!='N' || circle[i].text[2]!='D')
    {
        printf("radius");
        scanf("%f",&circle[i].radius);
        if(circle[i].radius<0)
        circle[i].area=0;

        else
        circle[i].area=process(circle[i].radius);
        ++i;
        printf("\n identifier:"); //next set of data//
        scanf("%s",circle[i].text);
    }
    n=--i;   //tag the highest value of i//
    // display the aary elemnts//
    printf("\n\n summary of results\n\n");
    for(i=0;i<=n;i++)
    printf("%s radius=%f area=%f\n",circle[i].text,circle[i].radius,circle[i].area);

 }
 float process(float r)  //function defination//
{
    float a;  // local variable declaration//
    a=PI*r*r;
    return (a);
}
output:
to stop, enter END for the identifier

 identifier:red
radius4

 identifier:yellow
radius2

 identifier:PINK
radius7

 identifier:BLACK
radius0

 identifier:END


 summary of results

red radius=4.000000 area=49.984001
yellow radius=2.000000 area=12.496000
PINK radius=7.000000 area=153.076004
BLACK radius=0.000000 area=0.000000













